# # import requests

# # GENIUS_API_TOKEN = "HrfZsg7_a0REbmTA6XtWHhHPeIc3P9F7bSlYtvyhnYRwJACkZ6vOmPheCAsUMpGl"

# # def search_song(query):
# #     base_url = "https://api.genius.com/search"
# #     headers = {
# #         "Authorization": f"Bearer {GENIUS_API_TOKEN}"
# #     }
# #     params = {"q": query}
    
# #     response = requests.get(base_url, headers=headers, params=params)
# #     data = response.json()
    
# #     results = []
# #     for hit in data["response"]["hits"][:1]:  # ’é’•÷Ä’°’§’°÷Ä’±’∂’•’∂÷Ñ ’¥’´’°’µ’∂ ’°’º’°’ª’´’∂ 3-’®
# #         title = hit["result"]["full_title"]
# #         url = hit["result"]["url"]
# #         results.append(f"{title}\n{url}")
    
# #     return results

# # import telebot

# # TOKEN = '6847465146:AAF-uSyAO4SSyxe90rWBp-HaUFu_sSvi0uI'
# # bot = telebot.TeleBot(TOKEN)

# # @bot.message_handler(func=lambda message: True)
# # def handle_message(message):
# #     query = message.text
# #     songs = search_song(query)
    
# #     if songs:
# #         reply = "\n\n".join(songs)
# #     else:
# #         reply = "’â’£’ø’° ’∞’°’¥’°’∫’°’ø’°’Ω’≠’°’∂ ’•÷Ä’£’•÷Ä üòî"
    
# #     bot.send_message(message.chat.id, reply)

# # bot.polling()
# # import telebot
# # import yt_dlp

# # BOT_TOKEN = "6847465146:AAF-uSyAO4SSyxe90rWBp-HaUFu_sSvi0uI"
# # bot = telebot.TeleBot(BOT_TOKEN)

# # def get_youtube_url(query):
# #     ydl_opts = {
# #         'quiet': True,
# #         'skip_download': True,
# #         'default_search': 'ytsearch1',  # ’ç’°’∞’¥’°’∂’°÷É’°’Ø’•’∂÷Ñ ’°’º’°’ª’´’∂ ’°÷Ä’§’µ’∏÷Ç’∂÷Ñ’´’∂
# #         # 'extract_flat': False,  # ‘º÷Ä’´’æ ’ø’æ’µ’°’¨’∂’•÷Ä ÷Ñ’°’∑’•’∂÷Ñ
# #     }
# #     with yt_dlp.YoutubeDL(ydl_opts) as ydl:
# #         info = ydl.extract_info(query, download=False)
# #         if 'entries' in info and len(info['entries']) > 0:
# #             video = info['entries'][0]
# #             return f"https://www.youtube.com/watch?v={video['id']}"
# #         elif 'id' in info:
# #             return f"https://www.youtube.com/watch?v={info['id']}"
# #         else:
# #             return None

# # @bot.message_handler(func=lambda message: True)
# # def handle_search(message):
# #     query = message.text.strip()
# #     bot.send_chat_action(message.chat.id, 'typing')

# #     url = get_youtube_url(query)
# #     if url:
# #         bot.send_message(message.chat.id, f"üéµ ‘±’∞’° ÷Ñ’∏ ’•÷Ä’£’®’ù\n{url}")
# #     else:
# #         bot.send_message(message.chat.id, "’â’∞’°’ª’∏’≤’æ’•÷Å ’£’ø’∂’•’¨ ’•÷Ä’£’´ YouTube ’∞’≤’∏÷Ç’¥’® üòî")

# # print("‘≤’∏’ø’® ’°’Ø’ø’´’æ ’ß...")
# # bot.polling()


# # ========== CONFIG ==========
# import telebot
# import requests
# import random

# # ‘±’µ’Ω’ø’•’≤ ’ø’•’≤’°’§÷Ä’´÷Ä ÷Ñ’∏ ’ø’•’¨’•’£÷Ä’°’¥ ’¢’∏’©’´ ’©’∏÷Ñ’•’∂’® ÷á TMDb API Key-’®
# BOT_TOKEN = "6847465146:AAF-uSyAO4SSyxe90rWBp-HaUFu_sSvi0uI"
# TMDB_API_KEY = "dbf1663d349c5e02a4908212e77363a0"

# bot = telebot.TeleBot(BOT_TOKEN)

# # TMDb Base URLs
# TMDB_BASE_URL = "https://api.themoviedb.org/3"
# TMDB_IMAGE_URL = "https://image.tmdb.org/t/p/w500"

# # ‘∫’°’∂÷Ä’•÷Ä’´ ID-’∂’•÷Ä’´ mapping (TMDb Genre IDs)
# GENRES = {
#     "Action": 28,
#     "Comedy": 35,
#     "Drama": 18,
#     "Thriller": 53,
#     "Romance": 10749,
#     "Sci-Fi": 878,
#     "Horror": 27,
#     "Animation": 16,
#     "Adventure": 12,
#     "Documentary": 99
# }

# # ’ç’ø’°÷Ä’ø ’∞÷Ä’°’¥’°’∂’®
# @bot.message_handler(commands=["start"])
# def start(message):
#     markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
#     btn1 = telebot.types.KeyboardButton("üé¨ ‘∫’°’∂÷Ä’•÷Ä")
#     btn2 = telebot.types.KeyboardButton("üé≤ ’ä’°’ø’°’∞’°’Ø’°’∂ ÷Ü’´’¨’¥")
#     btn3 = telebot.types.KeyboardButton("üèÜ ’ï’Ω’Ø’°÷Ä’°’Ø’´÷Ä ÷Ü’´’¨’¥’•÷Ä")
#     btn4 = telebot.types.KeyboardButton("üìÖ 2025 ÷Ü’´’¨’¥’•÷Ä")
#     markup.add(btn1, btn2, btn3, btn4)
#     bot.send_message(message.chat.id, "’à’≤’ª’∏÷Ç’µ’∂ üëã ‘∏’∂’ø÷Ä’´÷Ä ’ø’°÷Ä’¢’•÷Ä’°’Ø’®", reply_markup=markup)

# # ’Ä’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’´ ’∞’´’¥’∂’°’Ø’°’∂ ’¥’∑’°’Ø’∏’≤’®
# @bot.message_handler(func=lambda m: True)
# def handle_message(message):
#     text = message.text

#     if text == "üé¨ ‘∫’°’∂÷Ä’•÷Ä":
#         send_genre_buttons(message)
#     elif text in GENRES:
#         send_random_movie(message, genre_id=GENRES[text])
#     elif text == "üé≤ ’ä’°’ø’°’∞’°’Ø’°’∂ ÷Ü’´’¨’¥":
#         send_random_movie(message)
#     elif text == "üèÜ ’ï’Ω’Ø’°÷Ä’°’Ø’´÷Ä ÷Ü’´’¨’¥’•÷Ä":
#         send_oscar_movies(message)
#     elif text == "üìÖ 2025 ÷Ü’´’¨’¥’•÷Ä":
#         send_2025_movies(message)
#     else:
#         bot.send_message(message.chat.id, "‘∏’∂’ø÷Ä’•÷Ñ ÷Å’°’∂’Ø’´÷Å ’ø’°÷Ä’¢’•÷Ä’°’Ø÷â")

# # ‘∫’°’∂÷Ä’•÷Ä’´ ’Ø’∏’≥’°’Ø’∂’•÷Ä
# def send_genre_buttons(message):
#     markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
#     buttons = [telebot.types.KeyboardButton(name) for name in GENRES.keys()]
#     markup.add(*buttons)
#     bot.send_message(message.chat.id, "‘∏’∂’ø÷Ä’•÷Ñ ’™’°’∂÷Ä’®", reply_markup=markup)

# # ’ä’°’ø’°’∞’°’Ø’°’∂ ÷Ü’´’¨’¥ ’®’Ω’ø ’™’°’∂÷Ä’´ ’Ø’°’¥ ’°’º’°’∂÷Å
# def send_random_movie(message, genre_id=None):
#     url = f"{TMDB_BASE_URL}/discover/movie"
#     params = {
#         "api_key": TMDB_API_KEY,
#         "sort_by": "popularity.desc",
#         "vote_count.gte": 50,
#         "with_original_language": "en",
#         "page": random.randint(1, 5)
#     }
#     if genre_id:
#         params["with_genres"] = genre_id

#     response = requests.get(url, params=params)
#     data = response.json()

#     if "results" not in data or not data["results"]:
#         bot.send_message(message.chat.id, "’â’£’ø’∂’æ’•÷Å ÷Ü’´’¨’¥÷â")
#         return

#     movie = random.choice(data["results"])

#     title = movie.get("title")
#     year = movie.get("release_date", "")[:4]
#     overview = movie.get("overview", "’Ü’Ø’°÷Ä’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂ ’π’Ø’°÷â")
#     rating = movie.get("vote_average", "N/A")
#     poster_path = movie.get("poster_path")

#     # ‘π÷Ä’•’µ’¨’•÷Ä ’¢’•÷Ä’•’¨’∏÷Ç ’∞’°’¥’°÷Ä ÷Ü’´’¨’¥’´ ’∞’°’æ’•’¨’µ’°’¨ ’ø’æ’µ’°’¨’∂’•÷Ä
#     trailer_url = "’â’Ø’° ’©÷Ä’•’µ’¨’•÷Ä÷â"
#     movie_id = movie.get("id")
#     if movie_id:
#         video_url = f"{TMDB_BASE_URL}/movie/{movie_id}/videos"
#         video_params = {"api_key": TMDB_API_KEY}
#         video_resp = requests.get(video_url, params=video_params).json()
#         videos = video_resp.get("results", [])
#         trailer = next((v for v in videos if v["type"] == "Trailer" and v["site"] == "YouTube"), None)
#         if trailer:
#             trailer_url = f"https://www.youtube.com/watch?v={trailer['key']}"

#     caption = (
#         f"üé¨ <b>{title}</b> ({year})\n"
#         f"‚≠ê ’é’°÷Ä’Ø’°’∂’´’∑: {rating}/10\n\n"
#         f"üìù {overview}\n\n"
#         f"‚ñ∂Ô∏è <a href='{trailer_url}'>‘¥’´’ø’•’¨ ‘π÷Ä’•’µ’¨’•÷Ä’®</a>"
#     )

#     if poster_path:
#         photo_url = f"{TMDB_IMAGE_URL}{poster_path}"
#         bot.send_photo(message.chat.id, photo_url, caption=caption, parse_mode="HTML")
#     else:
#         bot.send_message(message.chat.id, caption, parse_mode="HTML")

# # ’ï’Ω’Ø’°÷Ä’°’Ø’´÷Ä ÷Ü’´’¨’¥’•÷Ä’´ ÷Å’∏÷Ç÷Å’°’Ø
# def send_oscar_movies(message):
#     url = f"{TMDB_BASE_URL}/discover/movie"
#     params = {
#         "api_key": TMDB_API_KEY,
#         "sort_by": "vote_average.desc",
#         "vote_count.gte": 5000,
#         "with_original_language": "en",
#         "page": 1
#     }
#     response = requests.get(url, params=params)
#     data = response.json()

#     movies = data.get("results", [])
#     if not movies:
#         bot.send_message(message.chat.id, "’â’Ø’°’∂ ’ï’Ω’Ø’°÷Ä’°’Ø’´÷Ä ÷Ü’´’¨’¥’•÷Ä÷â")
#         return

#     top_movie = movies[0]
#     send_movie_details(message, top_movie)

# # 2025 ’ø’°÷Ä’æ’° ÷Ü’´’¨’¥’•÷Ä
# def send_2025_movies(message):
#     url = f"{TMDB_BASE_URL}/discover/movie"
#     params = {
#         "api_key": TMDB_API_KEY,
#         "primary_release_year": "2025",
#         "sort_by": "popularity.desc",
#         "with_original_language": "en",
#         "page": 1
#     }
#     response = requests.get(url, params=params)
#     data = response.json()

#     movies = data.get("results", [])
#     if not movies:
#         bot.send_message(message.chat.id, "’â’Ø’°’∂ 2025 ’©’æ’°’Ø’°’∂’´ ÷Ü’´’¨’¥’•÷Ä÷â")
#         return

#     movie = random.choice(movies)
#     send_movie_details(message, movie)

# # ‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ÷Ü’∏÷Ç’∂’Ø÷Å’´’° ÷Ü’´’¨’¥ ÷Å’∏÷Ç’µ÷Å ’ø’°’¨’∏÷Ç ’∞’°’¥’°÷Ä
# def send_movie_details(message, movie):
#     title = movie.get("title")
#     year = movie.get("release_date", "")[:4]
#     overview = movie.get("overview", "’Ü’Ø’°÷Ä’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂ ’π’Ø’°÷â")
#     rating = movie.get("vote_average", "N/A")
#     poster_path = movie.get("poster_path")

#     # ‘π÷Ä’•’µ’¨’•÷Ä
#     trailer_url = "’â’Ø’° ’©÷Ä’•’µ’¨’•÷Ä÷â"
#     movie_id = movie.get("id")
#     if movie_id:
#         video_url = f"{TMDB_BASE_URL}/movie/{movie_id}/videos"
#         video_params = {"api_key": TMDB_API_KEY}
#         video_resp = requests.get(video_url, params=video_params).json()
#         videos = video_resp.get("results", [])
#         trailer = next((v for v in videos if v["type"] == "Trailer" and v["site"] == "YouTube"), None)
#         if trailer:
#             trailer_url = f"https://www.youtube.com/watch?v={trailer['key']}"

#     caption = (
#         f"üé¨ <b>{title}</b> ({year})\n"
#         f"‚≠ê ’é’°÷Ä’Ø’°’∂’´’∑: {rating}/10\n\n"
#         f"üìù {overview}\n\n"
#         f"‚ñ∂Ô∏è <a href='{trailer_url}'>‘¥’´’ø’•’¨ ‘π÷Ä’•’µ’¨’•÷Ä’®</a>"
#     )

#     if poster_path:
#         photo_url = f"{TMDB_IMAGE_URL}{poster_path}"
#         bot.send_photo(message.chat.id, photo_url, caption=caption, parse_mode="HTML")
#     else:
#         bot.send_message(message.chat.id, caption, parse_mode="HTML")

# # ’å’°’∂’®
# if __name__ == "__main__":
#     bot.polling(none_stop=True)



import telebot
import requests
import random

BOT_TOKEN = "6847465146:AAF-uSyAO4SSyxe90rWBp-HaUFu_sSvi0uI"
TMDB_API_KEY = "dbf1663d349c5e02a4908212e77363a0"

bot = telebot.TeleBot(BOT_TOKEN)

TMDB_BASE_URL = "https://api.themoviedb.org/3"
TMDB_IMAGE_URL = "https://image.tmdb.org/t/p/w500"

GENRES = {
   "Action üèÉ‚Äç‚ôÇÔ∏èüî•": 28,
    "Comedy üòÇüé≠": 35,
    "Drama üé¨üò¢": 18,
    "Thriller üò±üî™": 53,
    "Romance ‚ù§Ô∏èüíë": 10749,
    "Sci-Fi üëΩüöÄ": 878,
    "Horror üëªüî™": 27,
    "Animation üê≠üé®": 16,
    "Adventure üó∫Ô∏èüèûÔ∏è": 12,
    "Documentary üé•üìö": 99
}

SERIES_CATEGORIES = {
    "Drama Series üé≠": 18,
    "Comedy Series üòÇ": 35,
    "Reality Series üì∫": 10764,
    "Action Series üî•": 10759,
    "Sci-Fi Series üëΩ": 10765,
    "Mystery Series üïµÔ∏è‚Äç‚ôÇÔ∏è": 9648,
    "Crime Series üöì": 80,
    "War & Politics ‚öîÔ∏è": 10768
}

@bot.message_handler(commands=["start"])
def start(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = telebot.types.KeyboardButton("üé¨ Movie Gernes")
    btn2 = telebot.types.KeyboardButton("üé≤ Random Movie")
    btn3 = telebot.types.KeyboardButton("üèÜ Top raited films")
    btn4 = telebot.types.KeyboardButton("üìÖ 2025 Movies")
    btn5 = telebot.types.KeyboardButton("üì∫ Series")
    markup.add(btn1, btn2, btn3, btn4, btn5)
    bot.send_message(message.chat.id, "Hello üëã Select an option", reply_markup=markup)

@bot.message_handler(func=lambda m: True)
def handle_message(message):
    text = message.text

    if text == "üé¨ Gernes":
        send_genre_buttons(message)
    elif text == "üì∫ Series":
        send_series_categories(message)
    elif text in GENRES:
        send_random_movie(message, genre_id=GENRES[text])
    elif text in SERIES_CATEGORIES:
        send_random_series(message, genre_id=SERIES_CATEGORIES[text])
    elif text == "üé≤ Random Movie":
        send_random_movie(message)
    elif text == "üèÜ Top raited films":
        send_oscar_movies(message)
    elif text == "üìÖ 2025 Movies":
        send_2025_movies(message)
    elif text == "üîô Back":
        start(message)
    else:
        bot.send_message(message.chat.id, "Select an option from the list.")

def send_genre_buttons(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [telebot.types.KeyboardButton(name) for name in GENRES.keys()]
    btn_back = telebot.types.KeyboardButton("üîô Back")
    markup.add(*buttons)
    markup.add(btn_back)
    bot.send_message(message.chat.id, "Select the movie genre", reply_markup=markup)

def send_series_categories(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [telebot.types.KeyboardButton(name) for name in SERIES_CATEGORIES.keys()]
    btn_back = telebot.types.KeyboardButton("üîô Back")
    markup.add(*buttons)
    markup.add(btn_back)
    bot.send_message(message.chat.id, "Select the series genre", reply_markup=markup)

def send_random_movie(message, genre_id=None):
    url = f"{TMDB_BASE_URL}/discover/movie"
    params = {
        "api_key": TMDB_API_KEY,
        "sort_by": "popularity.desc",
        "vote_count.gte": 50,
        "with_original_language": "en",
        "page": random.randint(1, 5)
    }
    if genre_id:
        params["with_genres"] = genre_id

    response = requests.get(url, params=params)
    data = response.json()

    if "results" not in data or not data["results"]:
        bot.send_message(message.chat.id, "No movies found.")
        return

    movie = random.choice(data["results"])
    send_movie_details(message, movie)

def send_random_series(message, genre_id=None):
    url = f"{TMDB_BASE_URL}/discover/tv"
    params = {
        "api_key": TMDB_API_KEY,
        "sort_by": "popularity.desc",
        "vote_count.gte": 50,
        "with_original_language": "en",
        "page": random.randint(1, 5)
    }
    if genre_id:
        params["with_genres"] = genre_id

    response = requests.get(url, params=params)
    data = response.json()

    if "results" not in data or not data["results"]:
        bot.send_message(message.chat.id, "No series found.")
        return

    series = random.choice(data["results"])

    title = series.get("name")
    year = series.get("first_air_date", "")[:4]
    overview = series.get("overview", "Overview not available")
    rating = series.get("vote_average", "N/A")
    poster_path = series.get("poster_path")

    caption = (
        f"üì∫ <b>{title}</b> ({year})\n"
        f"‚≠ê Rating: {rating}/10\n\n"
        f"üìù {overview}"
    )

    if poster_path:
        photo_url = f"{TMDB_IMAGE_URL}{poster_path}"
        bot.send_photo(message.chat.id, photo_url, caption=caption, parse_mode="HTML")
    else:
        bot.send_message(message.chat.id, caption, parse_mode="HTML")

# def send_oscar_movies(message):
    # url = f"{TMDB_BASE_URL}/discover/movie"
    # params = {
    #     "api_key": TMDB_API_KEY,
    #     "sort_by": "vote_average.desc",
    #     "vote_count.gte": 878,
    #     "with_original_language": "en",
    #     "page": 1
    # }
    # response = requests.get(url, params=params)
    # data = response.json()

    # movies = data.get("results", [])
    # if not movies:
    #     bot.send_message(message.chat.id, "No high raited movies")
    #     return

    # top_movie = movies[0]
    # send_movie_details(message, top_movie)

def send_oscar_movies(message):
    url = f"{TMDB_BASE_URL}/discover/movie"
    params = {
        "api_key": TMDB_API_KEY,
        "sort_by": "vote_average.desc",
        "vote_count.gte": 878,
        "with_original_language": "en",
        "vote_average.gte": 8,  # ’ç’ø’∏÷Ç’£’∏÷Ç’¥’ù >=8
        "page": random.randint(1, 5)  # ’∫’°’ø’°’∞’°’Ø’°’∂ ’ß’ª’ù 1-’´÷Å 5 (’Ø’°÷Ä’∏’≤ ’•’Ω ’°’æ’•’¨’°÷Å’∂’•’¨ ’¥’´’∂’π÷á 10)
    }

    response = requests.get(url, params=params)
    data = response.json()

    movies = data.get("results", [])
    if not movies:
        bot.send_message(message.chat.id, "No high rated movies found.")
        return

    selected_movie = random.choice(movies)  # ’∫’°’ø’°’∞’°’Ø’°’∂ ÷Ü’´’¨’¥ ’®’∂’ø÷Ä’æ’°’Æ ’ß’ª’´÷Å
    send_movie_details(message, selected_movie)

def send_2025_movies(message):
    url = f"{TMDB_BASE_URL}/discover/movie"
    params = {
        "api_key": TMDB_API_KEY,
        "primary_release_year": "2025",
        "sort_by": "popularity.desc",
        "with_original_language": "en",
        "page": 1
    }
    response = requests.get(url, params=params)
    data = response.json()

    movies = data.get("results", [])
    if not movies:
        bot.send_message(message.chat.id, "No 2025 year movies")
        return

    movie = random.choice(movies)
    send_movie_details(message, movie)

def send_movie_details(message, movie):
    title = movie.get("title")
    year = movie.get("release_date", "")[:4]
    overview = movie.get("overview", "Overview not available.")
    rating = movie.get("vote_average", "N/A")
    poster_path = movie.get("poster_path")

    trailer_url = "No trailer movies"
    movie_id = movie.get("id")
    if movie_id:
        video_url = f"{TMDB_BASE_URL}/movie/{movie_id}/videos"
        video_params = {"api_key": TMDB_API_KEY}
        video_resp = requests.get(video_url, params=video_params).json()
        videos = video_resp.get("results", [])
        trailer = next((v for v in videos if v["type"] == "Trailer" and v["site"] == "YouTube"), None)
        if trailer:
            trailer_url = f"https://www.youtube.com/watch?v={trailer['key']}"

    caption = (
        f"üé¨ <b>{title}</b> ({year})\n"
        f"‚≠ê Rating: {rating}/10\n\n"
        f"üìù {overview}\n\n"
        f"‚ñ∂Ô∏è <a href='{trailer_url}'>Watch trailer</a>"
    )

    if poster_path:
        photo_url = f"{TMDB_IMAGE_URL}{poster_path}"
        bot.send_photo(message.chat.id, photo_url, caption=caption, parse_mode="HTML")
    else:
        bot.send_message(message.chat.id, caption, parse_mode="HTML")

if __name__ == "__main__":
    bot.polling(none_stop=True)
